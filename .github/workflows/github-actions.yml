name: CI/CD with Docker & Github Action

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: 1) Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 2) Set prod.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_NAME }}
          cloud.aws.s3.region.static: ${{ secrets.S3_REGION }}
          cloud.aws.s3.credentials.accessKey: ${{ secrets.S3_ACCESS_KEY }}
          cloud.aws.s3.credentials.secretKey: ${{ secrets.S3_SECRET_KEY }}
          jwt.secret: ${{ secrets.JWT_KEY }}
          security.kakao.client-id: ${{ secrets.KAKAO_CLIENT_ID }}
          security.kakao.client-secret: ${{ secrets.KAKAO_CLIENT_PRIVATE_ID }}

      - name: 3)Grant permission
        run: chmod +x ./gradlew

      - name: 4) Build with Gradle
        run: ./gradlew bootJar

      - name: 5) Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: 6) Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            sudo docker stop catchy-server || true
            sudo docker rm catchy-server || true
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -d --name catchy-server \
              -p 8081:8081 \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker image prune -f